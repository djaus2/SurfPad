<VisualMicro>
  <Program Name="ArduinoEchoSketch" Ext=".ino" Location="C:\Users\DavidJones\source\repos\SurfPad\ArduinoEchoSketch">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\DavidJones\AppData\Local\Temp\VMBuilds\ArduinoEchoSketch\uno\Debug" SketchName="ArduinoEchoSketch" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="uno" Description="Arduino/Genuino Uno" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="M:\Users\DavidJones\Documents\Arduino" name="Arduino/Genuino Uno" vid.0="0x2341" pid.0="0x0043" vid.1="0x2341" pid.1="0x0001" vid.2="0x2A03" pid.2="0x0043" vid.3="0x2341" pid.3="0x0243" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.maximum_data_size="2048" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0xFD" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.board="AVR_UNO" build.core="arduino" build.variant="standard" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10805" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="uno" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include\;{intellisense.tools.path}avr\include\avr\;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.20" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} &quot;-P{serial.port}&quot; -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\xaohtdp2.q2m\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.4-arduino2.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino9.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.1.1.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="uno" runtime.vm.boardinfo.name="uno" runtime.vm.boardinfo.desc="Arduino/Genuino Uno" runtime.vm.boardinfo.src_location="C:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="M:\Users\DavidJones\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved.name="standard" build.variant.vmresolved.full_path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" build.path="C:\Users\DavidJones\AppData\Local\Temp\VMBuilds\ArduinoEchoSketch\uno\Debug" build.project_name="ArduinoEchoSketch.ino" build.project_path="C:\Users\DavidJones\source\repos\SurfPad\ArduinoEchoSketch" ProjectDir="C:\Users\DavidJones\source\repos\SurfPad\ArduinoEchoSketch\" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM7" serial.port="COM7" serial.port.num="7" extra.time.local="1519407078" extra.time.utc="1519367478" extra.time.dst="39600" extra.time.zone="-39600" serial.port.caption="COM7   - USB Serial Device" serial.Caption="USB Serial Device (COM7)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="USB Serial Device" serial.DeviceID="USB\VID_26BA&amp;PID_0003\5543830353935161A112" serial.HardwareID.value0="USB\VID_26BA&amp;PID_0003" serial.Manufacturer="Microsoft" serial.Name="USB Serial Device (COM7)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_26BA&amp;PID_0003\5543830353935161A112" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="DESKTOP-GCCKFIE" serial.vid="0x26BA" serial.pid="0x0003" serial.iserial="5543830353935161A112" serial.port.iserial="5543830353935161A112" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\DavidJones\AppData\Local\Temp\VMBuilds\ArduinoEchoSketch\uno\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="9600" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="SocketServerTerminal.xaml.cs, line 138 character 33" Id="2f7ef6bb-478c-4dad-ac76-3934c48ff74d" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\socketserverterminal.xaml.cs" FileLine="138" FileColumn="33" FunctionName="SurfPadIoT.Pages.SocketServerTerminalPage.StreamSocketListener_ConnectionReceived(Windows.Networking.Sockets.StreamSocketListener sender, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)" FunctionLineOffset="29" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='2f7ef6bb-478c-4dad-ac76-3934c48ff74d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>131	                                await streamWriter.FlushAsync();
132	
133	                                await streamWriter.WriteAsync('@');
134	                                await streamWriter.FlushAsync();
135	
136	
137	                                responseLength = await streamReader.ReadAsync(chars, 0, 10);
--&gt;138	                                if (chars[0] == '0')
139	                                {
140	                                    await streamWriter.WriteAsync('1');
141	                                    await streamWriter.FlushAsync();
142	                                }
143	                                _Mode = Mode.ACK0;
144	
145	                                if (testing)
146	                                    response = await streamReader.ReadLineAsync();
147	                                responseLength = await streamReader.ReadAsync(chars, 0, 10);
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="SocketServerTerminal.xaml.cs, line 148 character 33" Id="5f56472a-e686-4541-ba6b-a291e65e01d4" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\socketserverterminal.xaml.cs" FileLine="148" FileColumn="33" FunctionName="SurfPadIoT.Pages.SocketServerTerminalPage.StreamSocketListener_ConnectionReceived(Windows.Networking.Sockets.StreamSocketListener sender, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)" FunctionLineOffset="39" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='5f56472a-e686-4541-ba6b-a291e65e01d4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>141	                                    await streamWriter.FlushAsync();
142	                                }
143	                                _Mode = Mode.ACK0;
144	
145	                                if (testing)
146	                                    response = await streamReader.ReadLineAsync();
147	                                responseLength = await streamReader.ReadAsync(chars, 0, 10);
--&gt;148	                                if (chars[0] == '2')
149	                                {
150	                                    await streamWriter.WriteAsync('3');
151	                                    await streamWriter.FlushAsync();
152	                                }
153	
154	                                _Mode = Mode.ACK2;
155	
156	                                if (testing)
157	                                    response = await streamReader.ReadLineAsync();
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="SocketServerTerminal.xaml.cs, line 169 character 33" Id="438a6a3e-846b-4d0c-b139-a58b1263668f" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\socketserverterminal.xaml.cs" FileLine="169" FileColumn="33" FunctionName="SurfPadIoT.Pages.SocketServerTerminalPage.StreamSocketListener_ConnectionReceived(Windows.Networking.Sockets.StreamSocketListener sender, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)" FunctionLineOffset="60" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='438a6a3e-846b-4d0c-b139-a58b1263668f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>162	                                    await streamWriter.FlushAsync();
163	                                }
164	                                _Mode = Mode.ACK4;
165	
166	                                if (testing)
167	                                    response = await streamReader.ReadLineAsync();
168	                                responseLength = await streamReader.ReadAsync(chars, 0, 10);
--&gt;169	                                if (chars[0] == '!')
170	                                {
171	                                    await streamWriter.WriteAsync('/');
172	                                    await streamWriter.FlushAsync();
173	                                }
174	
175	                                _Mode = Mode.AwaitJson;
176	
177	                                if (testing)
178	                                    response = await streamReader.ReadLineAsync();
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="SocketServerTerminal.xaml.cs, line 159 character 33" Id="a4ed8331-a820-4253-93c5-d06075fe9e35" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\socketserverterminal.xaml.cs" FileLine="159" FileColumn="33" FunctionName="SurfPadIoT.Pages.SocketServerTerminalPage.StreamSocketListener_ConnectionReceived(Windows.Networking.Sockets.StreamSocketListener sender, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)" FunctionLineOffset="50" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='a4ed8331-a820-4253-93c5-d06075fe9e35'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>152	                                }
153	
154	                                _Mode = Mode.ACK2;
155	
156	                                if (testing)
157	                                    response = await streamReader.ReadLineAsync();
158	                                responseLength = await streamReader.ReadAsync(chars, 0, 10);
--&gt;159	                                if (chars[0] == '4')
160	                                {
161	                                    await streamWriter.WriteAsync('5');
162	                                    await streamWriter.FlushAsync();
163	                                }
164	                                _Mode = Mode.ACK4;
165	
166	                                if (testing)
167	                                    response = await streamReader.ReadLineAsync();
168	                                responseLength = await streamReader.ReadAsync(chars, 0, 10);
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="SocketServerTerminal.xaml.cs, line 180 character 33" Id="e6043d4a-d4d5-4e35-aeae-7e6d3ff3be85" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\socketserverterminal.xaml.cs" FileLine="180" FileColumn="33" FunctionName="SurfPadIoT.Pages.SocketServerTerminalPage.StreamSocketListener_ConnectionReceived(Windows.Networking.Sockets.StreamSocketListener sender, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)" FunctionLineOffset="71" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='e6043d4a-d4d5-4e35-aeae-7e6d3ff3be85'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>173	                                }
174	
175	                                _Mode = Mode.AwaitJson;
176	
177	                                if (testing)
178	                                    response = await streamReader.ReadLineAsync();
179	                                responseLength = await streamReader.ReadAsync(chars, 0, 1);
--&gt;180	                                if (chars[0] == '/')
181	                                {
182	                                    _Mode = Mode.JsonConfig;
183	                                    await streamWriter.WriteLineAsync(
184	        "{\"Config\":[ [ { \"iWidth\": 120 },{ \"iHeight\": 100 },{ \"iSpace\": 5 },{ \"iCornerRadius\": 10 },{ \"iRows\": 2 },{ \"iColumns\": 5 },{ \"sComPortId\": \"\\\\\\\\?\\\\USB#VID_26BA&amp;PID_0003#5543830353935161A112#{86e0d1e0-8089-11d0-9ce4-08003e301f73}\" },{ \"sFTDIComPortId\": \"\\\\\\\\?\\\\FTDIBUS#VID_0403+PID_6001+FTG71BUIA#0000#{86e0d1e0-8089-11d0-9ce4-08003e301f73}\" },{ \"iComportConnectDeviceNo\": -1 },{ \"iFTDIComportConnectDeviceNo\": 1 },{ \"sUseSerial\": \"BT\" } ] ] }~");
185	                                    await streamWriter.FlushAsync();
186	
187	                                    if (testing)
188	                                        response = await streamReader.ReadLineAsync();
189	                                    responseLength = await streamReader.ReadAsync(chars, 0, 1);
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="SocketServerTerminal.xaml.cs, line 120 character 24" Id="3d4ee71f-cc38-47ab-8c59-020399340467" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\socketserverterminal.xaml.cs" FileLine="120" FileColumn="24" FunctionName="SurfPadIoT.Pages.SocketServerTerminalPage.StreamSocketListener_ConnectionReceived(Windows.Networking.Sockets.StreamSocketListener sender, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs args)" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='3d4ee71f-cc38-47ab-8c59-020399340467'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>113	            string response;
114	            char[] chars = new char[10];
115	            chars[1] = 'Z';
116	            int responseLength;
117	
118	            try
119	            { 
--&gt;120	                using (var streamReader = new StreamReader(args.Socket.InputStream.AsStreamForRead()))
121	                {
122	                    using (Stream outputStream = args.Socket.OutputStream.AsStreamForWrite())
123	                    {
124	                        using (var streamWriter = new StreamWriter(outputStream))
125	                        {
126	                            if (_Mode == Mode.JustConnected)
127	                            {
128	                                response = await streamReader.ReadLineAsync();
129	
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="USBSerialTerminal.xaml.cs, line 152 character 13" Id="f9dd7ce4-8524-4ac2-9220-400212983fda" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\surfpadiot\pages\usbserialterminal.xaml.cs" FileLine="152" FileColumn="13" FunctionName="SurfPadIoT.Pages.USBSerialTerminalPage.comPortInput_Click(object sender, RoutedEventArgs e)" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='f9dd7ce4-8524-4ac2-9220-400212983fda'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>145	        /// - Create the ReadCancellationTokenSource token
146	        /// - Start listening on the serial port input
147	        /// &lt;/summary&gt;
148	        /// &lt;param name="sender"&gt;&lt;/param&gt;
149	        /// &lt;param name="e"&gt;&lt;/param&gt;
150	        private async void comPortInput_Click(object sender, RoutedEventArgs e)
151	        {
--&gt;152	            var selection = ConnectDevices.SelectedItems;
153	
154	            if (selection.Count &lt;= 0)
155	            {
156	                if (ConnectDevices.Items.Count == 1)
157	                    ConnectDevices.SelectedIndex = 0;
158	                else
159	                {
160	                    status.Text = "Select a device and connect";
161	                    return;
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="SocketTerminal.xaml.cs, line 376 character 17" Id="791a58c3-2ed3-481e-9802-74cb42e77f35" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\roundedbox\pages\socketterminal.xaml.cs" FileLine="376" FileColumn="17" FunctionName="Socket.SocketTerminalPage.ReceiveCh()" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='791a58c3-2ed3-481e-9802-74cb42e77f35'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>369	
370	        public async Task&lt;char&gt; ReceiveCh()
371	        {
372	            char ch = ' ';
373	            char[] chars = new char[2];
374	            try
375	            {
--&gt;376	                int responseLength = await streamReader.ReadAsync(chars, 0, 1);
377	                if (responseLength == 1)
378	                    ch = chars[0];
379	            }
380	            catch (Exception ex)
381	            {
382	                Windows.Networking.Sockets.SocketErrorStatus webErrorStatus = Windows.Networking.Sockets.SocketError.GetStatus(ex.GetBaseException().HResult);
383	                MainPage.MP.clientListBox.Items.Add(webErrorStatus.ToString() != "Unknown" ? webErrorStatus.ToString() : ex.Message);
384	            }
385	            MainPage.MP.clientListBox.Items.Add("Sent " + ch + "\r\n");
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="SocketTerminal.xaml.cs, line 159 character 17" Id="c8778297-2541-42a4-963b-10987a322222" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\roundedbox\pages\socketterminal.xaml.cs" FileLine="159" FileColumn="17" FunctionName="Socket.SocketTerminalPage.Listen()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='c8778297-2541-42a4-963b-10987a322222'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>152	
153	            ReadCancellationTokenSource = new CancellationTokenSource();
154	            try
155	            {
156	
157	                this.buttonStopRecv.IsEnabled = true;
158	                this.buttonDisconnect.IsEnabled = false;
--&gt;159	                while (true) //!ReadCancellationTokenSource.Token.IsCancellationRequested)
160	                {
161	                    await ReadAsync(ReadCancellationTokenSource.Token);
162	                }
163	
164	            }
165	            catch (Exception ex)
166	            {
167	                this.buttonStopRecv.IsEnabled = false;
168	                this.buttonStartRecv.IsEnabled = false;
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="SocketTerminal.xaml.cs, line 409 character 13" Id="902e8baa-5b1f-4051-84c6-79476bede99f" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\roundedbox\pages\socketterminal.xaml.cs" FileLine="409" FileColumn="13" FunctionName="Socket.SocketTerminalPage.ReadAsync(CancellationToken cancellationToken)" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='902e8baa-5b1f-4051-84c6-79476bede99f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>402	            return ret;
403	        }
404	
405	        public async Task ReadAsync(CancellationToken cancellationToken)
406	        {
407	            char[] chars = new char[1024]; // streamReader.BaseStream.Length];
408	            int responseLength =  await streamReader.ReadAsync(chars,0,1024);
--&gt;409	            byte[] bytes = Encoding.Unicode.GetBytes(chars);
410	            bytes = bytes = bytes.Skip(0).Take(responseLength).ToArray();
411	            string recvdtxt = System.Text.Encoding.UTF8.GetString(bytes, 0, bytes.Length);
412	
413	            if (_Mode == Mode.Running)
414	            {
415	                await MainPage.MP.UpdateTextAsync(recvdtxt);                      
416	                
417	            }
418	        }
</Source>
      </BreakPoint>
      <BreakPoint Index="11" Name="SocketTerminal.xaml.cs, line 341 character 13" Id="54685017-ae9a-4a7f-aa65-3e000424a861" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\davidjones\source\repos\surfpad\roundedbox\pages\socketterminal.xaml.cs" FileLine="341" FileColumn="13" FunctionName="Socket.SocketTerminalPage.SendCh(char ch)" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C#" LocationType="3" Tag="&lt;vmbp Id='54685017-ae9a-4a7f-aa65-3e000424a861'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>334	            }
335	        }
336	
337	   
338	        public async Task SendCh(char ch)
339	        {
340	
--&gt;341	            char[] chars = new char[2];
342	            chars[0] = ch;
343	            try
344	            {
345	                await streamWriter.WriteAsync(ch);
346	                await streamWriter.FlushAsync();
347	            }
348	            catch (Exception ex)
349	            {
350	                Windows.Networking.Sockets.SocketErrorStatus webErrorStatus = Windows.Networking.Sockets.SocketError.GetStatus(ex.GetBaseException().HResult);
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>